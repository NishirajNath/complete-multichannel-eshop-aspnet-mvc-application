// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShop.Data;

#nullable disable

namespace eShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240121133334_ShoppingCartItem_added")]
    partial class ShoppingCartItem_added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eShop.Models.Order", b =>
                {
                    b.Property<int>("order_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_Id"));

                    b.Property<string>("customer_DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customer_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customer_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("order_Amount")
                        .HasColumnType("float");

                    b.Property<int>("order_PromoId")
                        .HasColumnType("int");

                    b.Property<int>("order_Type")
                        .HasColumnType("int");

                    b.HasKey("order_Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eShop.Models.OrderItem", b =>
                {
                    b.Property<int>("order_ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_ItemId"));

                    b.Property<int>("order_Id")
                        .HasColumnType("int");

                    b.Property<double>("order_ItemPromoId")
                        .HasColumnType("float");

                    b.Property<double>("order_ItemSubtotal")
                        .HasColumnType("float");

                    b.Property<double>("order_Itemprice")
                        .HasColumnType("float");

                    b.Property<int>("order_Itemquantity")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.HasKey("order_ItemId");

                    b.HasIndex("order_Id");

                    b.HasIndex("product_id");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("eShop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("cartItem_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartItem_Id"));

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cartItem_Quantitiy")
                        .HasColumnType("int");

                    b.Property<int>("product_UPC")
                        .HasColumnType("int");

                    b.HasKey("cartItem_Id");

                    b.HasIndex("product_UPC");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("eShop.Models.Store", b =>
                {
                    b.Property<int>("store_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("store_Id"));

                    b.Property<string>("store_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("store_PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("store_isOpen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("store_Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("eShop.Models.product", b =>
                {
                    b.Property<int>("product_UPC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("product_UPC"));

                    b.Property<string>("product_availableStore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_category")
                        .HasColumnType("int");

                    b.Property<string>("product_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_expirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("product_imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_inStock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_promotion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_unitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_unitPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("store_Id")
                        .HasColumnType("int");

                    b.HasKey("product_UPC");

                    b.HasIndex("store_Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eShop.Models.OrderItem", b =>
                {
                    b.HasOne("eShop.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Models.product", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("eShop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("eShop.Models.product", "product")
                        .WithMany()
                        .HasForeignKey("product_UPC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("eShop.Models.product", b =>
                {
                    b.HasOne("eShop.Models.Store", "store")
                        .WithMany("products")
                        .HasForeignKey("store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("store");
                });

            modelBuilder.Entity("eShop.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eShop.Models.Store", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
