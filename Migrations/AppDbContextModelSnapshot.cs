// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShop.Controllers.Data;

#nullable disable

namespace eShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eShop.Models.Store", b =>
                {
                    b.Property<int>("store_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("store_Id"));

                    b.Property<string>("store_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("store_PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("store_isOpen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("store_Id");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("eShop.Models.product", b =>
                {
                    b.Property<int>("product_UPC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("product_UPC"));

                    b.Property<string>("product_availableStore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_category")
                        .HasColumnType("int");

                    b.Property<string>("product_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_expirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("product_imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_inStock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_promotion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_unitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_unitPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("store_Id")
                        .HasColumnType("int");

                    b.HasKey("product_UPC");

                    b.HasIndex("store_Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("eShop.Models.product", b =>
                {
                    b.HasOne("eShop.Models.Store", "store")
                        .WithMany("products")
                        .HasForeignKey("store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("store");
                });

            modelBuilder.Entity("eShop.Models.Store", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
